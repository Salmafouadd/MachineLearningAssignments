import numpy as np, pandas as pd, seaborn as sns, matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.datasets import make_moons
from sklearn.cluster import KMeans

Kmeans = pd.read_csv("Customer data.csv")
[row1,col1] = np.shape(Kmeans)
Kmeans_after = Kmeans.iloc[:,1:col1]
Customer_data = pd.DataFrame(Kmeans_after).to_numpy()
[row,col] = np.shape(Customer_data)
k=6
Centroids = Kmeans.iloc[0:k,1:col1] 
Centroids_after = pd.DataFrame(Centroids).to_numpy()
Centroids_new = np.zeros([row,col])
Centroids_new[0:k,0:col1] = Centroids_after
Eucledian_distance = np.zeros([row,k])
Distance_Type = 'Eucledian distance'
Cluster_Distance = np.zeros([row,k])
Centroids_newrand = Customer_data[np.random.choice(row,k,replace=False)]

def GUC_Distance (Centroids_newrand, Customer_data, Distance_Type):
    if(Distance_Type == 'Eucledian distance'):
        for i in range(k):    
            Eucledian_distance[:,i] = ((Customer_data-Centroids_newrand[i])**2).sum(axis=1)
            Cluster_Distance = Eucledian_distance           
    else:
        Cluster_Distance = np.corrcoef(Centroids_newrand[0:k,:],Customer_data) 
    return Cluster_Distance

def GUC_Kmean (Customer_data, k, Distance_Type):
    Centroids_newrand = Customer_data[np.random.choice(row,k,replace=False)]
    while True:
        closest1 = np.zeros(row).astype(int)
        closest2 = closest1.copy()
        if(Distance_Type == 'Eucledian distance'):
            distance = GUC_Distance(Centroids_newrand, Customer_data,'Eucledian distance')
        else:
            distance = GUC_Distance(Centroids_newrand,Customer_data,'Pearson correlation distance')
        closest1=np.argmin(distance,axis=1)
        for i in range(k):
            Centroids_newrand[i,:] = Customer_data[closest1==i].mean(axis=0)
            Distortion_Fn = (1/row)*np.sum(Customer_data-np.resize(Centroids_newrand,(row,col)))*2
            plt.plot(Distortion_Fn,k)
            if(Distance_Type == 'Eucledian distance'):
                Final_Cluster_distance = GUC_Distance(Centroids_newrand,Customer_data,'Eucledian distance')
            else:
                Final_Cluster_distance = GUC_Distance(Centroids_newrand,Customer_data,'Pearson correlation distance')
        if any(closest1==closest2):
            break
    return  Final_Cluster_distance, Distortion_Fn

After_GUC_Kmean = GUC_Kmean(Customer_data,k,'Eucledian distance')
kmeans = KMeans(n_clusters=6)
kmeans.fit(Customer_data)
def display_cluster(X,km=[],num_clusters=0):
    color = 'brgcmyk' #List colors
    alpha = 0.5 #color obaque
    s = 20
    if num_clusters == 0:
        plt.scatter(X[:,0],X[:,1],c = color[0],alpha = alpha,s = s)
    else:
        for i in range(num_clusters):
            plt.scatter(X[kmeans.labels_==i,0],X[kmeans.labels_==i,1],c = color[i],alpha = alpha,s=s)
            plt.scatter(kmeans.cluster_centers_[i][0],kmeans.cluster_centers_[i][1],c = color[i], marker = 'x', s = 100)

plt.rcParams['figure.figsize'] = [8,8]
sns.set_style("whitegrid")
sns.set_context("talk")
# Produce a data set that represent the x and y o coordinates of a circle
# this part can be replaced by data that you import froma file
angle = np.linspace(0,2*np.pi,20, endpoint = False)
X = np.append([np.cos(angle)],[np.sin(angle)],0).transpose()
# Data is displayed
# to display the data only it is assumed that the number of clusters is zero which is the
display_cluster(X)

kmeans_Customer_data = GUC_Kmean(Customer_data, k,'Eucledian distance')
kmeans = KMeans(n_clusters=6)
kmeans.fit(Customer_data)

def display_cluster(X,km=[],num_clusters=0):
    color = 'brgcmyk' #List colors
    alpha = 0.5 #color obaque
    s = 20
    if num_clusters == 0:
        plt.scatter(X[:,0],X[:,1],c = color[0],alpha = alpha,s = s)
    else:
        for i in range(num_clusters):
            
            plt.scatter(X[kmeans.labels_==i,0],X[kmeans.labels_==i,1],c = color[i],alpha = alpha,s=s)
            plt.scatter(kmeans.cluster_centers_[i][0],kmeans.cluster_centers_[i][1],c = color[i]
, marker = 'x', s = 100)

result = display_cluster(Customer_data,km=[],num_clusters=6)

plt.rcParams['figure.figsize'] = [8,8]
sns.set_style("whitegrid")
sns.set_context("talk")
# Produce a data set that represent the x and y o coordinates of a circle
# this part can be replaced by data that you import froma file
angle = np.linspace(0,2*np.pi,20, endpoint = False)
X = np.append([np.cos(angle)],[np.sin(angle)],0).transpose()
# Data is displayed
# to display the data only it is assumed that the number of clusters is zero which is the
disp = display_cluster(X)
n_samples = 1000
n_bins = 4
centers = [(-3, -3), (0, 0), (3, 3), (6, 6), (9,9)]
X, y = make_blobs(n_samples=n_samples, n_features=2, cluster_std=1.0,
centers=centers, shuffle=False, random_state=42)
n_samples = 1000
X, y = noisy_moons = make_moons(n_samples=n_samples, noise= .1)
a=display_cluster(X)
k_means_Examples= GUC_Kmean (np.resize(X,(row,col)),k,'Eucledian distance' )
    
